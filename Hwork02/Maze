#include<iostream>
#include<cstdio>
#include<cstring> 


using namespace std ;

typedef enum { Copy = -1, Right, Down, Left, Up } Moves ;

class CoXY {
	
	int y ;
	int x ;
	
	public:
		
	CoXY(): y(0), x(0) {
	} ;
		
	CoXY( int py, int px ){
		y = py ;
		x = px ;
	} // CoXY
	
	void setXY( const int py, const int px ) {
		y = py ;
		x = px ;
	}
	
	int getX() const {
		return x ;
	}
	int getY() const {
		return y ;
	}
	
	CoXY nextXY( Moves dir ) const {
	
		CoXY pt( y, x ) ;
		switch( dir ) {
			
			case Right: 
				pt.x++ ;
				break ;
			case Down:
				pt.y-- ;
				break ;
			case Left:
				pt.x-- ;
				break ;
			case Up:
				pt.y++ ;
				break ;
			default:
				;
				
		} // switch
		
		return pt ;
	
	} // nextXY
	
	bool match( const CoXY &pt ) {
		
		if ( y == pt.y && x == pt.x )
			return true ;
		
		return false ;	
		
	} // match()
	
	bool inRange( const CoXY &maxLimit ) {
		
		if ( y >= 0 && y < maxLimit.y && x >= 0 && x < maxLimit.x )
			return true ;
			
		return false ;
		
	} // inRange
	
}; // class CoXY

class Maze {
			
	char **mArray ;
	CoXY coMax ;
	
	public:
		
	bool Load( string fileName ) ;
	
	void Print() ;
	
	bool SolveMaze( CoXY pt ) ;
	
}; // class Maze

void Maze::Print() {
	
	for ( int i = 0 ; i < coMax.getY() ; i++ ){
		for( int j = 0 ; j < coMax.getX() ; j++ )
			cout << mArray[i][j] ;
			
		cout << "\n" ;
	} // for
	
} // Print

bool Maze::Load( string fileName ){
	
	FILE *infile = NULL ;
	bool success = false ;
	coMax.setXY(0, 0) ;
	
	fileName = "input" + fileName + ".txt" ;
	infile = fopen(fileName.c_str(), "r") ;
	if ( infile == NULL )
		;
	else{
		
		int arg1 = 0, arg2 = 0 ;
		fscanf( infile, "%d %d", &arg1, &arg2 ) ;
		coMax.setXY( arg2, arg1 ) ;
		if ( coMax.getY() > 0 && coMax.getX() > 0 ){
			
			int line = 0 ;
			char *temp = new char[coMax.getX() + 1] ;
			mArray = new char *[coMax.getY()] ;
			
			while( fscanf( infile, "%s", temp ) != EOF ){
				
				mArray[line] = new char [coMax.getX() + 1] ;
				strcpy( mArray[line++], temp ) ;
				
			} // while
			
			if ( line == coMax.getY() )
				success = true ;
				
		} // if
		
		fclose( infile ) ;	
		
	} // else
	
	return success ;
	
} // Load()

bool Maze::SolveMaze( CoXY pt ) {
	
	if ( !pt.inRange( coMax ) )
		return false ;
	else if ( mArray[pt.getX()][pt.getY()] == 'G' ) {
		cout << "It's G!\n" ;
		return true ;
	} // else if
	else if ( mArray[pt.getX()][pt.getY()] == 'E' ) {
		
		mArray[pt.getX()][pt.getY()] = 'V' ;
		
		if ( SolveMaze( pt.nextXY( Right ) ) ) {
			mArray[pt.getX()][pt.getY()] = 'R' ; 
			return true ;
		} // if
		else if ( SolveMaze( pt.nextXY( Down ) ) ) {
			mArray[pt.getX()][pt.getY()] = 'R' ; 
			return true ;
		} // if
		else if ( SolveMaze( pt.nextXY( Left ) ) ) {
			mArray[pt.getX()][pt.getY()] = 'R' ; 
			return true ;
		} // if
		else if ( SolveMaze( pt.nextXY( Up ) ) ) {
			mArray[pt.getX()][pt.getY()] = 'R' ; 
			return true ;
		} // if
			
		return false ;
		
	} // else if
	else
		return false ;
	
} // SolveMaze

int main() {
	
	Maze maze ;
	string whichdeta ;
	cout << "快點輸入你要的數據啦 : " ;
	cin >> whichdeta ;
	maze.Load( whichdeta ) ;
	CoXY pt(0, 0) ;
	if ( maze.SolveMaze( pt ) )
		cout << "YAS!\n" ;
	else
		cout << "走不到耶~\n" ;
		
	maze.Print() ;
	
} // main
