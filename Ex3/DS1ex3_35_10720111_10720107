// 10720111 陳少暉  10720107 陳丕中

#include<stdio.h> 
#include<iostream>
#include<string.h> 

using namespace std ;

int GetInput() {
	// 取得用戶輸入，以確保格式 
	string input ; 
	cin >> input ;
	for ( int i = 0 ; i < input.size() ; i++ )
		if ( !isdigit( input[i] ) ) {
			cout << "格式錯誤，請輸入一個不為負的整數: " ;
			cin >>  input ;
			i = 0 ;
		} // if
	
	int inputInt = 0 ;
	for ( int i = 0 ; i < input.size() ; i++ )
		inputInt = inputInt * 10 + input[i] - '0' ;
		
	return inputInt ;
	
} // GetInput()

class Stack {	
	
	
	public:
		
	void Push( char ch ) ;
	void Pop( ) ;
	int ReadInput() ;
	bool NotNum( char ch ) ; // 判斷此數是否為num 
	bool FindPair() ; // 找有沒有成對的括號 
	bool RightEquation() ; // 看此式是否為運算式 
	
    struct Data ;
	Data * top = NULL ;
	
}; // class Stack

struct Stack::Data {
  char ch ;
  Data * next = NULL ;
  Data * front = NULL ;
} ;

void Stack::Push( char ch ) {
  Data * temp ;
  temp = new Data ;
  temp->ch = ch ;
  if ( top != NULL ) {
    top->next = temp ;
    temp->front = top ;
    top = temp ;
  } // if
  else {
    top = temp ;
  } // else
  
} // Push()

void Stack::Pop() {
	top = top->front ;
	delete top->next ;
	
} // Pop()

bool Stack::NotNum( char ch ) {
	
	if ( '0' <= ch && ch <= '9' ) {
		return false ;
	} // if
	else{
		return true ;
	} // else
	
} // NotNum() 用來判斷是不是數字 

bool Stack::FindPair() {
} // FindPair()

bool Stack::RightEquation() {
} // RightEquation()



bool IsLegalEx( string ex ) {
	
	int numOpenP = 0, numCloseP = 0 ;
	bool wasOprator = false, wasOpenP = false, wasCloseP = false ;
	for ( int i = 0 ; i < ex.size() ; i++ ) {
		
		if ( ex[i] == '+' || ex[i] == '-' || ex[i] == '*' || ex[i] == '/' ) {
			if ( wasOprator ) {
				cout << "extra operator\n" ;
				return false ;
			}
			else if ( wasOpenP ) {
				cout << "not infix in p\n" ;
				return false ;
			}	
			wasOprator = true ;
			wasOpenP = false ;
			wasCloseP = false ;
		} // if
		else if ( '0' <= ex[i] && ex[i] <= '9' ) {
			if ( wasCloseP ) {
				cout << "extra operand\n" ;
				return false ;
			}
			wasOprator = false ;
			wasOpenP = false ;
			wasCloseP = false ;
		} // else if
		else if ( ex[i] == ')' ) {
			if ( wasOpenP || wasOprator ) {
				cout << "not infix in p\n" ;
				return false ;
			}	
			
			if ( numOpenP > numCloseP )
				numCloseP ++ ;
			else {
				cout << "extra close p\n" ;
				return false ;
			} // else		
			wasOprator = false ;
			wasOpenP = false ;
			wasCloseP = true ;
		} // else if
		else if ( ex[i] == '(' ) {
			numOpenP ++ ;
			wasOprator = false ;
			wasOpenP = true ;
			wasCloseP = false ;
		} // else if
		else if ( ex[i] == ' ' )
			;
		else {
			cout << ex[i] << " is a illegal char\n" ;
			return false ;
		}
			
	} // for	
	
	if ( numOpenP > numCloseP ) {
		cout << "extra open p\n" ;
		return false ;
	} // if 
	else if ( numOpenP < numCloseP ) {	
		cout << "extra close p\n" ;
		return false ;	
	} // else if
	
	return true ;
	
} // IsLegalEx()

int main() {
  
	int cmd = -1 ;
	cout << "1為執行\n0為退出\n請輸入指令:" ;
	cin >> cmd ;
	string temp ;
	while ( cmd != 0 ) {
	
		getline( cin, temp ) ;   // 除去\n 
		string ex ;
		cout << "輸入式子:" ;
		getline( cin, ex ) ;
		if ( IsLegalEx( ex ) )   // 判斷式子是否合法 
			cout << "Nice ex\n" ;
			
		cout << "1為執行\n0為退出\n請輸入指令:" ; 
		cin >> cmd ;
		
	} // while 
	
  	return 0 ;

} // main()
