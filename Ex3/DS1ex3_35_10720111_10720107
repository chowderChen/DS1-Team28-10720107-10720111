// 10720111 陳少暉  10720107 陳丕中

#include<stdio.h> 
#include<iostream>
#include<string.h> 

using namespace std ;

int GetInput() {
	// 取得用戶輸入，以確保格式 
	string input ; 
	cin >> input ;
	for ( int i = 0 ; i < input.size() ; i++ )
		if ( !isdigit( input[i] ) ) {
			cout << "格式錯誤，請輸入一個不為負的整數: " ;
			cin >>  input ;
			i = 0 ;
		} // if
	
	int inputInt = 0 ;
	for ( int i = 0 ; i < input.size() ; i++ )
		inputInt = inputInt * 10 + input[i] - '0' ;
		
	return inputInt ;
	
} // GetInput()

struct Data {
	
  string str ;
  char ch ;
  Data * next ;
  
} ;

class Stack {	
	
	Data* top ;
	
	public:
		
	Stack() {
		top = NULL ;
	} // Stack	
	~Stack() {
		while( !IsEmpty() )
			Pop() ;
		delete top ;
	} // ~Stack
		
	void Push( char ch ) ;
	Data* GetTop() ;
	void Pop() ;
	void ShowTop() ;
	bool IsEmpty() ;
	
}; // class Stack

void Stack::Push( char ch ) {
	
	Data* temp = new Data() ;
	temp->ch = ch ;
	temp->next = NULL ;
	
	if ( !IsEmpty() ) {
    	temp->next = top ;
   	 	top = temp ;
  	} // if
 	else {
    	top = temp ;
	} // else
  
} // Push()

Data* Stack::GetTop() {
	
	if ( IsEmpty() )
		cout << "There is nothing can be get.\n" ;
	else {
		Data* temp = new Data() ;
		temp = top ;
		top = top->next ;
		return temp ;
	} // else
	
} // Pop()

void Stack::Pop() {
	
	if ( IsEmpty() )
		cout << "There is nothing can be pop.\n" ;
	else {
		Data* temp = new Data() ;
		temp = top ;
		top = top->next ;
		delete temp ;
	} // else
	
} // Pop()

void Stack::ShowTop() {
	
	if ( IsEmpty() )
		cout << "There is nothing can be show\n" ;
	else
		cout << top->ch << "\n" ;
	
} // ShowTop

bool Stack::IsEmpty() {
	
	if ( top == NULL )
		return true ;
		
	return false ;
	
} // IsEmpty()

class List {
	
	Data* head ;
	int total ;
	
	public:
		
	List() {
		head = NULL ;
		total = 0 ;
	} // List
	~List() {
	// remove or something			
		delete head ;
	} // ~List
	
	void Add( string str ) ;
	bool IsEmpty() ;
	void Remove( int p ) ;
};

void List::Add( string str ) {
	
	Data* temp = new Data() ;
	temp->str = str ;
	temp->next = NULL ;
	if ( IsEmpty() )
		head = temp ;
	else {
		Data* walk = new Data() ;
		walk = head ;
		while ( walk->next != NULL )
			walk = walk->next ;
			
		walk->next = temp ;
	} // else 
	total ++ ;
	
} // Add()

bool List::IsEmpty() {
	
	if( head == NULL )
		return true ;
		
	return false ;
	
} // IsEmpty()

void List::Remove( int p ) {
	
	if ( 0 <= p && p < total )
		;
	
} // Delete()


bool IsLegalEx( string ex ) {
	
	int numOpenP = 0, numCloseP = 0 ;   // 記錄這式子有幾個'('和')' 
	bool wasOprator = false, wasOpenP = false, wasCloseP = false ;
	for ( int i = 0 ; i < ex.size() ; i++ ) {
		
		if ( ex[i] == '+' || ex[i] == '-' || ex[i] == '*' || ex[i] == '/' ) {
			if ( wasOprator ) {   // 如果運算符號前是運算符號 
				cout << "extra operator\n" ;
				return false ;
			} // if
			else if ( wasOpenP ) {   // 如果運算符號前是'(' 
				cout << "not infix in p\n" ;
				return false ;
			} // else if
			wasOprator = true ;
			wasOpenP = false ;
			wasCloseP = false ;
		} // if
		else if ( '0' <= ex[i] && ex[i] <= '9' ) {
			if ( wasCloseP ) {  // 如果數字前是')' 
				cout << "extra operand\n" ;
				return false ;
			} 
			wasOprator = false ;
			wasOpenP = false ;
			wasCloseP = false ;
		} // else if
		else if ( ex[i] == ')' ) {
			if ( wasOpenP || wasOprator ) {
				// 如果)前面是(或運算符號，就代表括號內的式子不為中序 
				cout << "not infix in p\n" ;
				return false ;
			}	
			
			if ( numOpenP > numCloseP ) 
				// 如果前面記錄到'('的數量大於')'，正常記錄')'數量增加 
				numCloseP ++ ;
			else {   // 如為非，表示這式子多了')' 
				cout << "extra close p\n" ;
				return false ;
			} // else		
			wasOprator = false ;
			wasOpenP = false ;
			wasCloseP = true ;
		} // else if
		else if ( ex[i] == '(' ) {
			numOpenP ++ ;  
			wasOprator = false ;
			wasOpenP = true ;
			wasCloseP = false ;
		} // else if
		else if ( ex[i] == ' ' )
			;
		else {    // 不是+-*/()也不是數字也不是空格，是非法字元 
			cout << ex[i] << " is a illegal char\n" ;
			return false ;
		}
			
	} // for	
	
	if ( numOpenP > numCloseP ) {   
		// 如果式子中'('的數量大於')'，表示有多的'(' 
		cout << "extra open p\n" ;
		return false ;
	} // if 
	else if ( numOpenP < numCloseP ) {	
		cout << "extra close p\n" ;
		return false ;	
	} // else if
	
	return true ;
	
} // IsLegalEx()

List InfixToPostfix( string ex ) {
	// stack只需要裝運算符號(char)
	// List有數字有符號，struct Data該怎麼做 
	Stack stack ;
	for ( int i = 0 ; i < ex.size() ; i ++ ) {
		if ( '0' <= ex[i] && ex[i] <= '9' )
			;
		else if ( ex[i] == '+' || ex[i] == '-' || ex[i] == '*' || ex[i] == '/' )
			;
		else if ( ex[i] == '(' )
			;
		else if ( ex[i] == ')' )
			;
	} // for
	
} // InfixToPostfix

int main() {
  
	int cmd = -1 ;
	cout << "1為執行\n0為退出\n請輸入指令:" ;
	cin >> cmd ;
	string temp ;
	while ( cmd != 0 ) {
	
		getline( cin, temp ) ;   // 除去\n 
		string ex ;
		cout << "輸入式子:" ;
		getline( cin, ex ) ;
		
		if ( IsLegalEx( ex ) ) {   // 判斷式子是否合法 
			List postfixEx = InfixToPostfix( ex ) ;
		} // if
			
			
		cout << "1為執行\n0為退出\n請輸入指令:" ; 
		cin >> cmd ;
		
	} // while 
	
  	return 0 ;

} // main()
